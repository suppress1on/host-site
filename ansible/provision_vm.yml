---
- name: Provision VM using cloud image and cloud-init
  hosts: localhost
  connection: local
  become: yes

  collections:
    - community.libvirt

  vars:
    vm_name: "default_vm"
    cpu_cores: 2
    ram_gb: 4
    disk_gb: 10
    vm_db_id: 0
    # НОВОЕ: Добавляем дефолтные значения для пользователя и пароля VM
    # Это критично, чтобы { vm_username } и { vm_password } были заменены
    vm_username: "ubuntu"
    vm_password: "ubuntu" # ВНИМАНИЕ: Для продакшена используйте Ansible Vault для паролей!

    vm_ram_mb: "{{ ram_gb * 1024 }}"
    base_image: "/media/pavel/12bf2147-7420-4f06-b0c7-aec8bf4972f2/base_images/ubuntu-22.04-server-cloudimg-amd64-disk-kvm.img"
    vm_disk_path: "/media/pavel/12bf2147-7420-4f06-b0c7-aec8bf4972f2/vm_disks/{{ vm_name }}.qcow2"

    libvirt_network_bridge: "default"
    libvirt_uri: "qemu:///system"

    cloud_init_iso_path: "/var/lib/libvirt/boot/{{ vm_name }}-cloud-init.iso"
    cloud_init_user_data_file: "/tmp/{{ vm_name }}-user-data.yml"

    cloud_init_user_data: |
      #cloud-config
      hostname: {{ vm_name }}
      manage_etc_hosts: true
      users:
        - name: {{ vm_username }} # Убедитесь, что это {{ vm_username }}, а не { vm_username }
          groups: sudo
          shell: /bin/bash
          sudo: ALL=(ALL) NOPASSWD:ALL
          lock_passwd: false
          # passwd: "{{ vm_password | password_hash('sha512') }}" # Можно использовать chpasswd вместо passwd
          ssh_pwauth: true
      ssh_pwauth: true
      disable_root: false
      chpasswd:
        list: |
          {{ vm_username }}:{{ vm_password }} # Убедитесь, что это {{ vm_username }}:{{ vm_password }}
        expire: false
      runcmd:
        # Установка qemu-guest-agent для virsh domifaddr и лучшей интеграции
        - [ sh, -c, "apt update && apt install -y qemu-guest-agent" ]
        - [ systemctl, enable, qemu-guest-agent ]
        - [ systemctl, start, qemu-guest-agent ]
        # Более надежные sed команды для включения PermitRootLogin и PasswordAuthentication
        - [ sh, -c, "sed -i 's/^\\(#*\\s*PermitRootLogin\\s*\\).*/PermitRootLogin yes/' /etc/ssh/sshd_config" ]
        - [ sh, -c, "sed -i 's/^\\(#*\\s*PasswordAuthentication\\s*\\).*/PasswordAuthentication yes/' /etc/ssh/sshd_config" ]
        - [ systemctl, restart, sshd ] # Используйте sshd, а не ssh

    cloud_init_network_config: |
      version: 2
      ethernets:
        ens3:
          dhcp4: true

  tasks:
    - name: Ensure libvirt is running
      ansible.builtin.systemd:
        name: libvirtd
        state: started
        enabled: true

    - name: Ensure necessary directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ vm_disk_path | dirname }}"
        - "{{ cloud_init_iso_path | dirname }}"

    - name: Get list of all defined VMs in libvirt
      community.libvirt.virt:
        command: list_vms
        uri: "{{ libvirt_uri }}"
      register: libvirt_vms
      ignore_errors: true

    - name: Set fact if VM already exists
      ansible.builtin.set_fact:
        vm_already_exists: "{{ vm_name in libvirt_vms.list_vms | default([]) }}"

    - name: Destroy and undefine existing VM if found
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: absent # Это остановит и удалит определение VM
        uri: "{{ libvirt_uri }}"
      when: vm_already_exists
      ignore_errors: true

    - name: Delete existing disk image if exists
      ansible.builtin.file:
        path: "{{ vm_disk_path }}"
        state: absent
      # Выполняем удаление файла только если VM действительно была удалена или ее не было
      when: not vm_already_exists or (libvirt_vms.list_vms is defined and vm_name not in libvirt_vms.list_vms)
      ignore_errors: true # Игнорируем, если файл уже не существует

    - name: Create QCOW2 disk with backing file
      ansible.builtin.command:
        cmd: "qemu-img create -f qcow2 -F qcow2 -b {{ base_image }} {{ vm_disk_path }} {{ disk_gb }}G"
      args:
        creates: "{{ vm_disk_path }}"
      when: not vm_already_exists # Создаем диск только если VM не существовала

    - name: Write cloud-init user-data
      ansible.builtin.copy:
        dest: "{{ cloud_init_user_data_file }}"
        content: "{{ cloud_init_user_data }}"
        mode: '0600'
      when: not vm_already_exists

    - name: Write network-config
      ansible.builtin.copy:
        dest: "/tmp/{{ vm_name }}-network-config.yml"
        content: "{{ cloud_init_network_config }}"
        mode: '0600'
      when: not vm_already_exists

    - name: Create cloud-init ISO
      ansible.builtin.command: >
        cloud-localds {{ cloud_init_iso_path }}
        {{ cloud_init_user_data_file }}
        /tmp/{{ vm_name }}-network-config.yml
      args:
        creates: "{{ cloud_init_iso_path }}"
      when: not vm_already_exists # Создаем ISO только если VM не существовала

    - name: Launch VM using virt-install with backing image and cloud-init
      ansible.builtin.command: >
        virt-install
        --name {{ vm_name }}
        --ram {{ vm_ram_mb }}
        --vcpus {{ cpu_cores }}
        --import
        --disk path={{ vm_disk_path }},format=qcow2
        --disk path={{ cloud_init_iso_path }},device=cdrom
        --network network={{ libvirt_network_bridge }},model=virtio
        --graphics none
        --console pty,target_type=serial
        --os-variant ubuntu22.04
        --noreboot 
        --wait -1
      register: virt_result
      failed_when: virt_result.rc != 0
      when: not vm_already_exists # Запускаем VM только если она не существовала

    - name: Debug virt-install result
      ansible.builtin.debug:
        msg: |
          Command: {{ virt_result.cmd | default('No command recorded') }}
          Stdout: {{ virt_result.stdout | default('No stdout recorded') }}
          Stderr: {{ virt_result.stderr | default('No stderr recorded') }}
          Return Code: {{ virt_result.rc | default('No return code recorded') }}
      when: virt_result is defined and not vm_already_exists

    - name: Start the VM # НОВАЯ ЗАДАЧА: Явный запуск VM
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: running
        uri: "{{ libvirt_uri }}"
      when: not vm_already_exists # Запускаем только если VM была только что создана

    - name: Get VM IP address from Libvirt (requires qemu-guest-agent inside VM and DHCP lease)
      ansible.builtin.shell: >
        virsh domifaddr {{ vm_name }} --source lease | grep ipv4 | awk '{print $4}' | cut -d'/' -f1
      register: vm_ip_raw
      changed_when: false
      failed_when: false # Не падаем, если IP еще не получен
      ignore_errors: true
      retries: 5 # Увеличиваем количество попыток
      delay: 10 # Увеличиваем задержку между попытками
      until: vm_ip_raw.stdout | length > 0
      when: not vm_already_exists # Выполняем только при создании новой VM

    - name: Set VM IP fact
      ansible.builtin.set_fact:
        vm_ip_address: "{{ vm_ip_raw.stdout | default('N/A') }}"
      when: not vm_already_exists

    - name: Wait for SSH to be available on VM
      ansible.builtin.wait_for:
        host: "{{ vm_ip_address }}"
        port: 22
        timeout: 30 # До 5 минут ожидания
        state: started
      delegate_to: localhost
      when: vm_ip_address != "N/A" and not vm_already_exists
      ignore_errors: true # Игнорируем ошибки, если SSH так и не поднялся (для отладки)

    - name: Notify success
      ansible.builtin.debug:
        msg: |
          VM '{{ vm_name }}' launched using cloud image.
          IP Address: {{ vm_ip_address }}
          User: {{ vm_username }}, Password: {{ vm_password }}
          Try connecting via virt-manager or SSH: ssh {{ vm_username }}@{{ vm_ip_address }}
      when: not vm_already_exists

  handlers:
    - name: Cleanup cloud-init files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ cloud_init_user_data_file }}"
        - "/tmp/{{ vm_name }}-network-config.yml"
        - "{{ cloud_init_iso_path }}"
      

# ansible-playbook -i ansible/inventory.ini ansible/provision_vm.yml   --extra-vars '{"vm_name": "test_vm_'"$(date +%s)"'", "cpu_cores": 1, "ram_gb": 1, "disk_gb": 10, "os_type": "ubuntu", "vm_db_id": '"$(shuf -i 100-999 -n 1)"'}'   --vault-password-file ~/.ansible/vault_pass.txt
# ansible-playbook -i ansible/inventory.ini ansible/provision_vm.yml   --extra-vars '{"vm_name": "test_vm_'$(date +%s)'", "cpu_cores": 1, "ram_gb": 1, "disk_gb": 10, "os_type": "ubuntu", "vm_username": "pavel", "vm_password": "1", "vm_db_id": '"$(shuf -i 100-999 -n 1)"'}'   --vault-password-file ~/.ansible/vault_pass.txt
# $6$quPcADT0PsNzan69$QPZljR6RtyfTwLPBo24p3WAjKDC.ZoOKywOHnvSY8b3HVitT5nADni.m5HwPtM2vF8ecWStV7ig3jIihUPFnt/